{
	"info": {
		"_postman_id": "19b2b13a-da98-4454-ac60-dbc513a7c477",
		"name": "TestBed_Guide",
		"description": "Example deployment of DSC provider to DSC consumer communication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Guide for Preparing and Validating the Preconfigured Setup",
			"item": [
				{
					"name": "Preconfiguration",
					"item": [
						{
							"name": "Register Resource: POST /api/offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Offer ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"offers\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"DWD Weather Warnings\",\n  \"description\": \"DWD weather warnings for germany.\",\n  \"keywords\": [\n    \"DWD\"\n  ],\n  \"publisher\": \"https://dwd.com\",\n  \"language\": \"DE\",\n  \"license\": \"\",\n  \"sovereign\": \"https://dwd.com\",\n  \"endpointDocumentation\": \"\",\n  \"paymentModality\": \"undefined\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/offers",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Catalog: POST /api/catalogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Catalog ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"catalogs\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"IDS Catalog\", \n    \"description\": \"This catalog is created from an IDS infomodel catalog.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/catalogs",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"catalogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Offer to Catalog: POST /api/catalogs/{id}/offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \n    \"{{offers}}\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{catalogs}}/offers",
									"host": [
										"{{catalogs}}"
									],
									"path": [
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Rule: POST /api/rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Rule ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"rules\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"title\": \"Example Usage Policy\",\n   \"description\": \"Usage policy provide access applied\",\n   \"value\": \"{\\n  \\\"@context\\\" : {\\n    \\\"ids\\\" : \\\"https://w3id.org/idsa/core/\\\",\\n    \\\"idsc\\\" : \\\"https://w3id.org/idsa/code/\\\"\\n  },\\n  \\\"@type\\\" : \\\"ids:Permission\\\",\\n  \\\"@id\\\" : \\\"https://w3id.org/idsa/autogen/permission/51f5f7e4-f97f-4f91-bc57-b243714642be\\\",\\n  \\\"ids:description\\\" : [ {\\n    \\\"@value\\\" : \\\"Usage policy provide access applied\\\",\\n    \\\"@type\\\" : \\\"http://www.w3.org/2001/XMLSchema#string\\\"\\n  } ],\\n  \\\"ids:title\\\" : [ {\\n    \\\"@value\\\" : \\\"Example Usage Policy\\\",\\n    \\\"@type\\\" : \\\"http://www.w3.org/2001/XMLSchema#string\\\"\\n  } ],\\n    \\\"ids:action\\\" : [ {\\n    \\\"@id\\\" : \\\"https://w3id.org/idsa/code/USE\\\"\\n  } ]\\n }\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/rules",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Contract Template: POST /api/contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Contract ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contracts\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Contract\",\n    \"description\": \"This is an example contract\",\n    \"provider\":\"https://connectora:8080/\",\n    \"start\": \"2023-10-22T07:48:37.068Z\",\n    \"end\": \"2028-10-22T07:48:37.068Z\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/contracts",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"contracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Rule to Contract Template: POST /api/contracts/{id}/rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"{{rules}}\"  \n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contracts}}/rules",
									"host": [
										"{{contracts}}"
									],
									"path": [
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Artifacts: POST /api/artifacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Artifact ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"artifacts\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Example artifact with weather data\",\n    \"description\": \"This is an example artifact that contains information about weather data\",\n    \"value\": \"{\\\"coord\\\":{\\\"lon\\\":139.01,\\\"lat\\\":35.02},\\\"weather\\\":[{\\\"id\\\":800,\\\"main\\\":\\\"Clear\\\",\\\"description\\\":\\\"clearsky\\\",\\\"icon\\\":\\\"01n\\\"}],\\\"base\\\":\\\"stations\\\",\\\"main\\\":{\\\"temp\\\":285.514,\\\"pressure\\\":1013.75,\\\"humidity\\\":100,\\\"temp_min\\\":285.514,\\\"temp_max\\\":285.514,\\\"sea_level\\\":1023.22,\\\"grnd_level\\\":1013.75},\\\"wind\\\":{\\\"speed\\\":5.52,\\\"deg\\\":311},\\\"clouds\\\":{\\\"all\\\":0},\\\"dt\\\":1485792967,\\\"sys\\\":{\\\"message\\\":0.0025,\\\"country\\\":\\\"JP\\\",\\\"sunrise\\\":1485726240,\\\"sunset\\\":1485763863},\\\"id\\\":1907296,\\\"name\\\":\\\"Tawarano\\\",\\\"cod\\\":200}\", \n    \"automatedDownload\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/artifacts",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Representations: POST /api/representations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Representation ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"representations\", jsonData[\"_links\"][\"self\"][\"href\"])",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Example Representation\",\n    \"description\": \"\", \n    \"mediaType\": \"application/json\", \n    \"language\": \"https://w3id.org/idsa/code/EN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/representations",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"representations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Artifact to Representation: POST /api/representations/{id}/artifacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"{{artifacts}}\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{representations}}/artifacts",
									"host": [
										"{{representations}}"
									],
									"path": [
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Representation to Offer: POST /api/offers/{id}/representations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"{{representations}}\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{offers}}/representations",
									"host": [
										"{{offers}}"
									],
									"path": [
										"representations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Contract to Offer: POST /api/offers/{id}/contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"{{contracts}}\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{offers}}/contracts",
									"host": [
										"{{offers}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Connector A at MetaData Broker: POST /api/ids/connector/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORA_URL}}/api/ids/connector/update?recipient={{BROKER}}",
									"host": [
										"{{CONNECTORA_URL}}"
									],
									"path": [
										"api",
										"ids",
										"connector",
										"update"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Connector B at MetaData Broker: POST /api/ids/connector/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/connector/update?recipient={{BROKER}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"connector",
										"update"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cheking successful registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Select the first catalog from the list of catalog ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Broker_catalog\", jsonData[\"@graph\"][1][\"@id\"])\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}&elementId=https://localhost/connectors/",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										},
										{
											"key": "elementId",
											"value": "https://localhost/connectors/"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validating Preconfigured Setup: Interaction between Connectors",
					"item": [
						{
							"name": "Request Self-description from Connector A: POST /api/ids/description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Catalog ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Provider_catalog\", jsonData[\"ids:resourceCatalog\"][0][\"@id\"])\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{Recipient_url}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{Recipient_url}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Information regarding the desired resource: POST /api/ids/description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Catalog ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Provider_resource\", jsonData[\"ids:offeredResource\"][0][\"@id\"]);\r",
											"    pm.collectionVariables.set(\"Provider_artifact\", jsonData[\"ids:offeredResource\"][0][\"ids:representation\"][0][\"ids:instance\"][0][\"@id\"]);\r",
											"    pm.collectionVariables.set(\"Provider_rule\", jsonData[\"ids:offeredResource\"][0][\"ids:contractOffer\"][0][\"ids:permission\"][0][\"@id\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{Recipient_url}}&elementId={{Provider_catalog}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{Recipient_url}}"
										},
										{
											"key": "elementId",
											"value": "{{Provider_catalog}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Negotiation: POST /api/ids/contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve Consumer agreement ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var agreementLong = jsonData[\"_links\"][\"self\"][\"href\"]\r",
											"    var agreementId = agreementLong.replace(\"https://localhost:8081/api/agreements/\", \"\")\r",
											"    pm.collectionVariables.set(\"Consumer agreement ID\", agreementId)\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ {\r\n        \"@type\" : \"ids:Permission\",\r\n        \"@id\" : \"{{Provider_rule}}\",\r\n        \"ids:description\" : [ {\r\n          \"@value\" : \"Usage policy provide access applied\",\r\n          \"@type\" : \"http://www.w3.org/2001/XMLSchema#string\"\r\n        } ],\r\n        \"ids:title\" : [ {\r\n          \"@value\" : \"Example Usage Policy\",\r\n          \"@type\" : \"http://www.w3.org/2001/XMLSchema#string\"\r\n        } ],\r\n        \"ids:action\" : [ {\r\n          \"@id\" : \"https://w3id.org/idsa/code/USE\"\r\n        }],\r\n        \"ids:target\" : \"{{Provider_artifact}}\"\r\n} ]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/contract?recipient={{Recipient_url}}&resourceIds={{Provider_resource}}&artifactIds={{Provider_artifact}}&download=false",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"contract"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{Recipient_url}}"
										},
										{
											"key": "resourceIds",
											"value": "{{Provider_resource}}"
										},
										{
											"key": "artifactIds",
											"value": "{{Provider_artifact}}"
										},
										{
											"key": "download",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request the Artifact based on the Existing Agreement: POST /api/agreements/{id}/artifacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve data URL\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLink = jsonData[\"_embedded\"][\"artifacts\"][0][\"_links\"][\"data\"][\"href\"]\r",
											"    pm.collectionVariables.set(\"dataLink\", dataLink)\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/agreements/{{Consumer agreement ID}}/artifacts",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"agreements",
										"{{Consumer agreement ID}}",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{dataLink}}",
									"host": [
										"{{dataLink}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validating Preconfigured Setup: Interaction with Broker",
					"item": [
						{
							"name": "Request Broker Self-Description: POST /api/ids/description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retrieve List of Catalog ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Broker_catalog_list\", jsonData[\"ids:resourceCatalog\"][0][\"ids:offeredResource\"][0][\"ids:representation\"][0][\"ids:instance\"][0][\"@id\"])\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query List of Connectors to Check Successful Registration: POST /api/ids/description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Select the first catalog from the list of catalog ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Broker_catalog\", jsonData[\"@graph\"][1][\"@id\"])\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}&elementId={{Broker_catalog_list}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										},
										{
											"key": "elementId",
											"value": "{{Broker_catalog_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Information About Connector A: POST /api/ids/description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}&elementId={{Broker_catalog}}",
									"host": [
										"{{CONNECTORB_URL}}"
									],
									"path": [
										"api",
										"ids",
										"description"
									],
									"query": [
										{
											"key": "recipient",
											"value": "{{BROKER}}"
										},
										{
											"key": "elementId",
											"value": "{{Broker_catalog}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Testbed User Guide",
			"item": [
				{
					"name": "4. Interacting with Connectors",
					"item": [
						{
							"name": "4.1. Request Self-descriptions from Available Connectors",
							"item": [
								{
									"name": "Connector A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Catalog ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Provider_catalog\", jsonData[\"ids:resourceCatalog\"][0][\"@id\"])\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{CONNECTORA_URL}}/api/ids/description?recipient=https://localhost:8080/api/ids/data",
											"host": [
												"{{CONNECTORA_URL}}"
											],
											"path": [
												"api",
												"ids",
												"description"
											],
											"query": [
												{
													"key": "recipient",
													"value": "https://localhost:8080/api/ids/data"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Connector B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient=https://localhost:8081/api/ids/data",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"ids",
												"description"
											],
											"query": [
												{
													"key": "recipient",
													"value": "https://localhost:8081/api/ids/data"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.2. Request Data from Available Connectors",
							"item": [
								{
									"name": "Connector A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Catalog ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Provider_resource\", jsonData[\"ids:offeredResource\"][0][\"@id\"]);\r",
													"    pm.collectionVariables.set(\"Provider_artifact\", jsonData[\"ids:offeredResource\"][0][\"ids:representation\"][0][\"ids:instance\"][0][\"@id\"]);\r",
													"    pm.collectionVariables.set(\"Provider_rule\", jsonData[\"ids:offeredResource\"][0][\"ids:contractOffer\"][0][\"ids:permission\"][0][\"@id\"]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient=https://connectora:8080/api/ids/data&elementId={{Provider_catalog}}",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"ids",
												"description"
											],
											"query": [
												{
													"key": "recipient",
													"value": "https://connectora:8080/api/ids/data"
												},
												{
													"key": "elementId",
													"value": "{{Provider_catalog}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Negotiation: POST /api/ids/contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Consumer agreement ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var agreementLong = jsonData[\"_links\"][\"self\"][\"href\"]\r",
													"    var agreementId = agreementLong.replace(\"https://localhost:8081/api/agreements/\", \"\")\r",
													"    pm.collectionVariables.set(\"Consumer agreement ID\", agreementId)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[ {\r\n        \"@type\" : \"ids:Permission\",\r\n        \"@id\" : \"{{Provider_rule}}\",\r\n        \"ids:description\" : [ {\r\n          \"@value\" : \"provide-access\",\r\n          \"@type\" : \"http://www.w3.org/2001/XMLSchema#string\"\r\n        } ],\r\n        \"ids:title\" : [ {\r\n          \"@value\" : \"Example Usage Policy\",\r\n          \"@type\" : \"http://www.w3.org/2001/XMLSchema#string\"\r\n        } ],\r\n        \"ids:action\" : [ {\r\n          \"@id\" : \"https://w3id.org/idsa/code/USE\"\r\n        }],\r\n        \"ids:target\" : \"{{Provider_artifact}}\"\r\n} ]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/ids/contract?recipient={{Recipient_url}}&resourceIds={{Provider_resource}}&artifactIds={{Provider_artifact}}&download=false",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"ids",
												"contract"
											],
											"query": [
												{
													"key": "recipient",
													"value": "{{Recipient_url}}"
												},
												{
													"key": "resourceIds",
													"value": "{{Provider_resource}}"
												},
												{
													"key": "artifactIds",
													"value": "{{Provider_artifact}}"
												},
												{
													"key": "download",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request the Artifact based on the Existing Agreement: POST /api/agreements/{id}/artifacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve data URL\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var dataLink = jsonData[\"_embedded\"][\"artifacts\"][0][\"_links\"][\"data\"][\"href\"]\r",
													"    pm.collectionVariables.set(\"dataLink\", dataLink)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/agreements/{{Consumer agreement ID}}/artifacts",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"agreements",
												"{{Consumer agreement ID}}",
												"artifacts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "5. Interacting with the MetaData Broker",
					"item": [
						{
							"name": "5.1. Query the Self-description of the MetaData Broker",
							"item": [
								{
									"name": "Request Broker Self-Description: POST /api/ids/description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve List of Catalog ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Broker_catalog_list\", jsonData[\"ids:resourceCatalog\"][0][\"ids:offeredResource\"][0][\"ids:representation\"][0][\"ids:instance\"][0][\"@id\"])\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"ids",
												"description"
											],
											"query": [
												{
													"key": "recipient",
													"value": "{{BROKER}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5.2. Query the MetaData Broker for Available Connectors in the Testbed",
							"item": [
								{
									"name": "Query List of Connectors to Check Successful Registration: POST /api/ids/description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Select the first catalog from the list of catalog ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Broker_catalog\", jsonData[\"@graph\"][1][\"@id\"])\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{CONNECTORB_URL}}/api/ids/description?recipient={{BROKER}}&elementId={{Broker_catalog_list}}",
											"host": [
												"{{CONNECTORB_URL}}"
											],
											"path": [
												"api",
												"ids",
												"description"
											],
											"query": [
												{
													"key": "recipient",
													"value": "{{BROKER}}"
												},
												{
													"key": "elementId",
													"value": "{{Broker_catalog_list}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CONNECTORA_URL",
			"value": "https://localhost:8080"
		},
		{
			"key": "CONNECTORB_URL",
			"value": "https://localhost:8081"
		},
		{
			"key": "offers",
			"value": ""
		},
		{
			"key": "catalogs",
			"value": ""
		},
		{
			"key": "rules",
			"value": ""
		},
		{
			"key": "contracts",
			"value": ""
		},
		{
			"key": "artifacts",
			"value": ""
		},
		{
			"key": "representations",
			"value": ""
		},
		{
			"key": "Provider_catalog",
			"value": ""
		},
		{
			"key": "Provider_resource",
			"value": ""
		},
		{
			"key": "Provider_artifact",
			"value": ""
		},
		{
			"key": "Provider_rule",
			"value": ""
		},
		{
			"key": "Recipient_url",
			"value": "https://connectora:8080/api/ids/data"
		},
		{
			"key": "Consumer agreement ID",
			"value": ""
		},
		{
			"key": "dataLink",
			"value": ""
		},
		{
			"key": "BROKER",
			"value": "https://broker-reverseproxy/infrastructure"
		},
		{
			"key": "Broker_catalog_list",
			"value": ""
		},
		{
			"key": "Broker_catalog",
			"value": ""
		}
	]
}
