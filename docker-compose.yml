services:

  omejdn:
    image: nginx:1.21.6
    container_name: omejdn
    ports:
      - 80:80
      - 443:443      
    environment:
      - OMEJDN_DOMAIN=${OMEJDN_DOMAIN}
      - OMEJDN_PATH=${OMEJDN_PATH}
      - UI_PATH=${UI_PATH}
    volumes:
      - ./DAPS/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./DAPS/keys/TLS/daps.cert:/etc/nginx/daps.cert
      - ./DAPS/keys/TLS/daps.key:/etc/nginx/daps.key
    networks:
      - local

  omejdn-server:
    image: ghcr.io/fraunhofer-aisec/omejdn-server:${OMEJDN_VERSION}
    container_name: omejdn-server
    environment:
      - OMEJDN_ISSUER=${OMEJDN_ISSUER}
      - OMEJDN_FRONT_URL=${OMEJDN_ISSUER}
      - OMEJDN_OPENID=true
      - OMEJDN_ENVIRONMENT=${OMEJDN_ENVIRONMENT}
      - OMEJDN_ACCEPT_AUDIENCE=idsc:IDS_CONNECTORS_ALL
      - OMEJDN_DEFAULT_AUDIENCE=idsc:IDS_CONNECTORS_ALL
      - OMEJDN_ADMIN=${ADMIN_USERNAME}:${ADMIN_PASSWORD}
    volumes:
      - ./DAPS/config:/opt/config
      - ./DAPS/keys:/opt/keys
    networks:
      - local

  omejdn-ui:
    image: ghcr.io/fraunhofer-aisec/omejdn-ui:${UI_VERSION}
    container_name: omejdn-ui
    environment:
      - OIDC_ISSUER=${OMEJDN_ISSUER}
      - API_URL=${OMEJDN_ISSUER}/api/v1
      - CLIENT_ID=adminUI
    networks:
      - local

  connectora:
    image: ghcr.io/international-data-spaces-association/dataspace-connector:7.1.0
    container_name: connectora
    ports:
      - 8080:8080
    networks:
      - local
    volumes:
      - ./DataspaceConnectorA/conf/config.json:/config/config.json
      - ./DataspaceConnectorA/conf/testbed1.p12:/conf/testbed1.p12
      - ./DataspaceConnectorA/conf/connectorA.p12:/config/connectorA.p12
      - ./DataspaceConnectorA/conf/truststore.p12:/config/truststore.p12
    environment:
      - CONFIGURATION_PATH=/config/config.json
      - DAPS_URL=https://omejdn
      - DAPS_TOKEN_URL=https://omejdn/auth/token
      - DAPS_KEY_URL=https://omejdn/auth/jwks.json
      - DAPS_INCOMING_DAT_DEFAULT_WELLKNOWN=/jwks.json
      - SERVER_SSL_KEY-STORE=file:///config/connectorA.p12
      - CLEARING_HOUSE_URL=https://consumer-core:9999

  connectorb:
    image: ghcr.io/international-data-spaces-association/dataspace-connector:7.1.0
    container_name: connectorb
    ports:
      - 8081:8081
    networks:
      - local
    volumes:
      - ./DataspaceConnectorB/conf/config.json:/config/config.json
      - ./DataspaceConnectorB/conf/testbed2.p12:/conf/testbed2.p12
      - ./DataspaceConnectorB/conf/connectorB.p12:/config/connectorB.p12
      - ./DataspaceConnectorB/conf/truststore.p12:/config/truststore.p12
    environment:
      - CONFIGURATION_PATH=/config/config.json
      - SERVER_PORT=8081
      - DAPS_URL=https://omejdn
      - DAPS_TOKEN_URL=https://omejdn/auth/token
      - DAPS_KEY_URL=https://omejdn/auth/jwks.json
      - DAPS_INCOMING_DAT_DEFAULT_WELLKNOWN=/jwks.json
      - SERVER_SSL_KEY-STORE=file:///config/connectorB.p12
      - CLEARING_HOUSE_URL=https://consumer-core:9999

  broker-reverseproxy:
    image: registry.gitlab.cc-asp.fraunhofer.de/eis-ids/broker-open/reverseproxy
    container_name: broker-reverseproxy
    volumes:
      - ./MetadataBroker/server.crt:/etc/cert/server.crt
      - ./MetadataBroker/server.key:/etc/cert/server.key
    ports:
      - "444:443" # IDS-HTTP API
      - "81:80"
    networks:
      - local

  broker-core:
    image: idstestbed/broker-core:5.0.0
    container_name: broker-core
    volumes:
      - ./MetadataBroker/isstbroker-keystore.jks:/etc/cert/isstbroker-keystore.jks
    environment:
      - SPARQL_ENDPOINT=http://broker-fuseki:3030/connectorData
      - ELASTICSEARCH_HOSTNAME=broker-elasticsearch
      - SHACL_VALIDATION=true
      - DAPS_VALIDATE_INCOMING=true
      - COMPONENT_URI=https://localhost/
      - COMPONENT_CATALOGURI=https://localhost/connectors/
      - DAPS_URL=https://omejdn/auth/token
    expose:
      - "8080"
    networks:
      - local

  broker-fuseki:
    image: registry.gitlab.cc-asp.fraunhofer.de/eis-ids/broker-open/fuseki
    container_name: broker-fuseki
    volumes:
      - broker-fuseki:/fuseki
    expose:
      - "3030"
    networks:
      - local
      
  logging-service-mongo:
    image: mongo:latest
    container_name: "logging-service-mongo"
    environment:
      MONGO_INITDB_DATABASE: process
    ports:
      - 27019:27017
    networks:
      - local
      
  logging-service:
    build:
      context: ./Clearing-house
      dockerfile: ./docker/logging-service-multistage.Dockerfile
    container_name: "logging-service"
    depends_on:
        - document-api
        - keyring-api
        - logging-service-mongo
    environment:
        # Allowed levels: Off, Error, Warn, Info, Debug, Trace
        - API_LOG_LEVEL=Debug
    ports:
        - "8000:8000"
    volumes:
        - ./Clearing-house/clearing-house-app/logging-service/Rocket.toml:/server/Rocket.toml
        - ./Clearing-house/clearing-house-app/logging-service/keys:/server/keys
        - ./Clearing-house/clearing-house-app/certs:/server/certs
    networks:
      - local
      
  consumer-core:
    container_name: "consumer-core"
    image: fraunhoferaisec/trusted-connector-core:6.3.0
    tty: true
    stdin_open: true
    volumes:
        - ./Clearing-house/trusted-connector/allow-all-flows.pl:/root/deploy/allow-all-flows.pl
        - ./Clearing-house/trusted-connector/consumer-keystore.p12:/root/etc/keystore.p12
        - ./Clearing-house/trusted-connector/truststore.p12:/root/etc/truststore.p12
        - ./Clearing-house/trusted-connector/clearing-house-processors-0.8.0.jar:/root/jars/clearing-house-processors.jar
        - ./Clearing-house/trusted-connector/routes/clearing-house-routes.xml:/root/deploy/clearing-house-routes.xml
        - //var/run/docker.sock://var/run/docker.sock
    environment:
      TC_CH_ISSUER_CONNECTOR: "https://w3id.org/idsa/core/issuerConnector"
      TC_CH_AGENT: "https://w3id.org/idsa/core/Agent"
      TC_DAPS_URL: "http://omejdn"
    ports:
        - "8443:8443"
        - "9999:9999"
    networks:
      - local
      
  document-mongo:
    image: mongo:latest
    container_name: "document-mongo"
    environment:
      MONGO_INITDB_DATABASE: document
    ports:
      - 27017:27017
    networks:
      - local
      
  keyring-mongo:
    image: mongo:latest
    container_name: "keyring-mongo"
    environment:
      MONGO_INITDB_DATABASE: keyring
    ports:
      - 27018:27017
    networks:
      - local
      
  document-api:
    build:
      context: ./Clearing-house
      dockerfile: ./docker/document-api-multistage.Dockerfile
    container_name: "document-api"
    depends_on:
        - keyring-api
        - document-mongo
    environment:
        # Allowed levels: Off, Error, Warn, Info, Debug, Trace
        - API_LOG_LEVEL=Debug
    ports:
        - "8001:8001"
    volumes:
        - ./Clearing-house/clearing-house-app/document-api/Rocket.toml:/server/Rocket.toml
        - ./Clearing-house/clearing-house-app/certs:/server/certs
    networks:
      - local
      
  keyring-api:
    build:
      context: ./Clearing-house
      dockerfile: ./docker/keyring-api-multistage.Dockerfile
    container_name: "keyring-api"
    depends_on:
        - keyring-mongo
    environment:
        # Allowed levels: Off, Error, Warn, Info, Debug, Trace
        - API_LOG_LEVEL=Debug
    ports:
        - "8002:8002"
    volumes:
        - ./Clearing-house/clearing-house-app/keyring-api/init_db:/server/init_db
        - ./Clearing-house/clearing-house-app/keyring-api/Rocket.toml:/server/Rocket.toml
        - ./Clearing-house/clearing-house-app/certs:/server/certs
    networks:
      - local

volumes:
  broker-fuseki:

networks:
  local:
    driver: bridge
